============================= test session starts ==============================
platform darwin -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/casey/VisualStudioCode/usaspending
configfile: pyproject.toml
collected 751 items

tests/mocks/test_mock_client.py ..............                           [  1%]
tests/models/test_agency.py ............                                 [  3%]
tests/models/test_agency_subagencies.py FF..FF.F                         [  4%]
tests/models/test_award_agency_integration.py .......                    [  5%]
tests/models/test_award_common.py ..                                     [  5%]
tests/models/test_award_factory.py ....................                  [  8%]
tests/models/test_award_lazy_loading.py .........                        [  9%]
tests/models/test_award_office_integration.py .......                    [ 10%]
tests/models/test_award_types.py ....................................... [ 15%]
.s.................                                                      [ 18%]
tests/models/test_base_model.py .................                        [ 20%]
tests/models/test_district_spending.py .......                           [ 21%]
tests/models/test_funding.py .........                                   [ 22%]
tests/models/test_lazy_load.py ...........                               [ 24%]
tests/models/test_location.py .....................................      [ 29%]
tests/models/test_period_of_performance.py ...................           [ 31%]
tests/models/test_recipient.py ....................................      [ 36%]
tests/models/test_recipient_spending.py ........                         [ 37%]
tests/models/test_spending.py .....                                      [ 38%]
tests/models/test_subaward.py .................                          [ 40%]
tests/models/test_subtier_agency.py .F.......                            [ 41%]
tests/models/test_transaction.py .........................               [ 44%]
tests/queries/test_agency_award_summary.py ...................           [ 47%]
tests/queries/test_agency_query.py ...................                   [ 49%]
tests/queries/test_awards_search.py .................................... [ 54%]
......................................                                   [ 59%]
tests/queries/test_filters.py ...........                                [ 61%]
tests/queries/test_funding_search.py ....................                [ 63%]
tests/queries/test_query_builder_list_behavior.py .............          [ 65%]
tests/queries/test_query_builder_pagination.py ...............           [ 67%]
tests/queries/test_spending_search.py .....................              [ 70%]
tests/queries/test_spending_search_count.py ..........                   [ 71%]
tests/queries/test_sub_agency_query.py .FF....F........FFFFFFFFFF.       [ 75%]
tests/queries/test_subawards_search.py ...............                   [ 77%]
tests/resources/test_agency_resource.py ..............                   [ 79%]
tests/resources/test_award_resource.py ................                  [ 81%]
tests/resources/test_funding_resource.py ......                          [ 82%]
tests/resources/test_spending_resource.py ....                           [ 82%]
tests/resources/test_subawards_resource.py .......                       [ 83%]
tests/resources/test_transactions_resource.py .....                      [ 84%]
tests/test_client.py .........s                                          [ 85%]
tests/test_client_funding.py ..........                                  [ 86%]
tests/test_client_rate_limit.py ...                                      [ 87%]
tests/test_client_transactions.py ....                                   [ 87%]
tests/test_download_resource.py ...........                              [ 89%]
tests/test_mock_client_example.py .........                              [ 90%]
tests/test_spending_integration.py ...                                   [ 90%]
tests/utils/test_formatter.py .........                                  [ 92%]
tests/utils/test_rate_limit.py .................                         [ 94%]
tests/utils/test_retry.py ........                                       [ 95%]
tests/utils/test_text_formatter.py ..................................    [100%]

=================================== FAILURES ===================================
____________ TestAgencySubagencies.test_subagencies_property_basic _____________

self = <tests.models.test_agency_subagencies.TestAgencySubagencies object at 0x106ca2d90>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10668abd0>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_subagencies_property_basic(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that agency.subagencies returns SubTierAgency objects."""
        # Set up mock response
        mock_usa_client.set_response(
            "/api/v2/agency/080/sub_agency/",
            agency_subagencies_fixture_data
        )
    
        # Create agency with minimal required data
        agency_data = {
            "code": "080",
            "toptier_code": "080",
            "name": "NASA",
            "fiscal_year": 2025
        }
    
        agency = Agency(agency_data, mock_usa_client)
        subagencies = agency.subagencies
    
        # Verify API call was made
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "fiscal_year": 2025
            }
        )

tests/models/test_agency_subagencies.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10668abd0>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'fiscal_year': 2025, 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'fiscal_year': 2025}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,653 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,653 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,654 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10668abd0>
2025-08-27 21:57:44,654 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: 2025, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10668abd0>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: 2025, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
_________ TestAgencySubagencies.test_subagencies_property_with_offices _________

self = <tests.models.test_agency_subagencies.TestAgencySubagencies object at 0x106ca2f50>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107299b10>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_subagencies_property_with_offices(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that subagencies have offices populated."""
        # Set up mock response
        mock_usa_client.set_response(
            "/api/v2/agency/080/sub_agency/",
            agency_subagencies_fixture_data
        )
    
        # Create agency with minimal required data
        agency_data = {
            "code": "080",
            "toptier_code": "080",
            "name": "NASA"
        }
    
        agency = Agency(agency_data, mock_usa_client)
        subagencies = agency.subagencies
    
>       assert len(subagencies) == 1
E       assert 0 == 1
E        +  where 0 = len([])

tests/models/test_agency_subagencies.py:73: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,673 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,673 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,673 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107299b10>
2025-08-27 21:57:44,673 - usaspending.queries.agency_query - DEBUG - agency_query.py:29 - __init__() - AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107299b10>
2025-08-27 21:57:44,673 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107299b10>
DEBUG    usaspending.queries.agency_query:agency_query.py:29 AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107299b10>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
_______ TestAgencySubagencies.test_subagencies_property_uses_fiscal_year _______

self = <tests.models.test_agency_subagencies.TestAgencySubagencies object at 0x106ca3a10>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10728a310>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_subagencies_property_uses_fiscal_year(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that subagencies uses agency's fiscal year if available."""
        # Set up mock response
        mock_usa_client.set_response(
            "/api/v2/agency/080/sub_agency/",
            agency_subagencies_fixture_data
        )
    
        agency_data = {
            "code": "080",
            "toptier_code": "080",
            "name": "NASA",
            "fiscal_year": 2024  # Specific fiscal year
        }
    
        agency = Agency(agency_data, mock_usa_client)
        subagencies = agency.subagencies
    
        # Verify API was called with the agency's fiscal year
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "fiscal_year": 2024
            }
        )

tests/models/test_agency_subagencies.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10728a310>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'fiscal_year': 2024, 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'fiscal_year': 2024}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,675 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,675 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,675 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10728a310>
2025-08-27 21:57:44,675 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: 2024, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10728a310>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: 2024, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
________ TestAgencySubagencies.test_subagencies_property_no_fiscal_year ________

self = <tests.models.test_agency_subagencies.TestAgencySubagencies object at 0x106ca3f50>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_subagencies_property_no_fiscal_year(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that subagencies works without fiscal year."""
        # Set up mock response
        mock_usa_client.set_response(
            "/api/v2/agency/080/sub_agency/",
            agency_subagencies_fixture_data
        )
    
        agency_data = {
            "code": "080",
            "toptier_code": "080",
            "name": "NASA"
            # No fiscal year
        }
    
        agency = Agency(agency_data, mock_usa_client)
        subagencies = agency.subagencies
    
        # Verify API was called without fiscal year
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100
            }
        )

tests/models/test_agency_subagencies.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'limit': 100, 'order': 'desc', 'page': 1, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,678 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,678 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,678 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
2025-08-27 21:57:44,678 - usaspending.queries.agency_query - DEBUG - agency_query.py:29 - __init__() - AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
2025-08-27 21:57:44,678 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
DEBUG    usaspending.queries.agency_query:agency_query.py:29 AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107288f90>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
____ TestAgencySubagencies.test_subagencies_property_invalid_result_format _____

self = <tests.models.test_agency_subagencies.TestAgencySubagencies object at 0x106ca8c90>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107289710>

    def test_subagencies_property_invalid_result_format(self, mock_usa_client):
        """Test subagencies handles invalid result format gracefully."""
        invalid_response = {
            "toptier_code": "080",
            "fiscal_year": 2025,
            "results": ["invalid", {"valid": "data"}, None]  # Mixed invalid data
        }
    
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", invalid_response)
    
        agency_data = {
            "code": "080",
            "name": "Test Agency"
        }
    
        agency = Agency(agency_data, mock_usa_client)
        subagencies = agency.subagencies
    
        # Should only include the valid dict entry
>       assert len(subagencies) == 1
E       assert 0 == 1
E        +  where 0 = len([])

tests/models/test_agency_subagencies.py:237: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,682 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,682 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,682 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107289710>
2025-08-27 21:57:44,682 - usaspending.queries.agency_query - DEBUG - agency_query.py:29 - __init__() - AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107289710>
2025-08-27 21:57:44,682 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107289710>
DEBUG    usaspending.queries.agency_query:agency_query.py:29 AgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107289710>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
___________________ TestSubTierAgency.test_offices_property ____________________

self = <tests.models.test_subtier_agency.TestSubTierAgency object at 0x106fee210>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10738bb10>

    def test_offices_property(self, mock_usa_client):
        """Test offices property returns SubTierAgency objects."""
        data = {
            "name": "NASA",
            "abbreviation": "NASA",
            "total_obligations": 17275121376.15,
            "transaction_count": 29818,
            "new_award_count": 5465,
            "children": [
                {
                    "code": "80JSC0",
                    "name": "NASA JOHNSON SPACE CENTER",
                    "total_obligations": 3938738374.3,
                    "transaction_count": 1899,
                    "new_award_count": 210
                },
                {
                    "code": "80MSFC",
                    "name": "NASA MARSHALL SPACE FLIGHT CENTER",
                    "total_obligations": 3140833781.78,
                    "transaction_count": 1566,
                    "new_award_count": 158
                }
            ]
        }
    
        agency = SubTierAgency(data, mock_usa_client)
        offices = agency.offices
    
        assert len(offices) == 2
        assert all(isinstance(office, SubTierAgency) for office in offices)
    
        # Test first office
        assert offices[0].code == "80JSC0"
>       assert offices[0].name == "NASA JOHNSON SPACE CENTER"
E       AssertionError: assert 'NASA Johnson Space Center' == 'NASA JOHNSON SPACE CENTER'
E         
E         - NASA JOHNSON SPACE CENTER
E         + NASA Johnson Space Center

tests/models/test_subtier_agency.py:64: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,784 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,784 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
________________ TestSubAgencyQueryEndpoint.test_base_endpoint _________________

self = <test_sub_agency_query.TestSubAgencyQueryEndpoint object at 0x107103c50>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c450>

    def test_base_endpoint(self, mock_usa_client):
        """Test base endpoint property."""
        query = SubAgencyQuery(mock_usa_client)
>       assert query._endpoint == "/api/v2/agency/"
E       AssertionError: assert '/v2/agency/' == '/api/v2/agency/'
E         
E         - /api/v2/agency/
E         ? ----
E         + /v2/agency/

tests/queries/test_sub_agency_query.py:24: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,867 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,867 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,867 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c450>
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c450>
______________ TestSubAgencyQueryEndpoint.test_construct_endpoint ______________

self = <test_sub_agency_query.TestSubAgencyQueryEndpoint object at 0x107103fd0>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c110>

    def test_construct_endpoint(self, mock_usa_client):
        """Test endpoint construction with toptier_code."""
        query = SubAgencyQuery(mock_usa_client)
        endpoint = query._construct_endpoint("080")
>       assert endpoint == "/api/v2/agency/080/sub_agency/"
E       AssertionError: assert '/v2/agency/080/sub_agency/' == '/api/v2/agen...0/sub_agency/'
E         
E         - /api/v2/agency/080/sub_agency/
E         ? ----
E         + /v2/agency/080/sub_agency/

tests/queries/test_sub_agency_query.py:30: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,871 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,871 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,871 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c110>
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x10749c110>
________ TestSubAgencyQueryValidation.test_valid_toptier_codes_accepted ________

self = <test_sub_agency_query.TestSubAgencyQueryValidation object at 0x107116090>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6c90>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_valid_toptier_codes_accepted(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that valid toptier_codes are accepted."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        # 3-digit code
        result = query.get_subagencies("080")
>       assert result["toptier_code"] == "080"
               ^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'toptier_code'

tests/queries/test_sub_agency_query.py:76: KeyError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,874 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,874 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,875 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6c90>
2025-08-27 21:57:44,875 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6c90>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
____________ TestSubAgencyQueryExecution.test_get_subagencies_basic ____________

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107114150>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074e4050>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_basic(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test basic sub-agencies retrieval."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        result = query.get_subagencies("080")
    
        # Verify API call was made correctly
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100
            }
        )

tests/queries/test_sub_agency_query.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074e4050>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'limit': 100, 'order': 'desc', 'page': 1, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,879 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,879 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,879 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074e4050>
2025-08-27 21:57:44,879 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074e4050>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
______ TestSubAgencyQueryExecution.test_get_subagencies_with_fiscal_year _______

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107115d10>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6850>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_fiscal_year(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with fiscal year parameter."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        result = query.get_subagencies("080", fiscal_year=2024)
    
        # Verify API call was made with fiscal_year
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "fiscal_year": 2024
            }
        )

tests/queries/test_sub_agency_query.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6850>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'fiscal_year': 2024, 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'fiscal_year': 2024}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,883 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,883 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,883 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6850>
2025-08-27 21:57:44,883 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: 2024, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074a6850>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: 2024, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
______ TestSubAgencyQueryExecution.test_get_subagencies_with_agency_type _______

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107115590>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074d8fd0>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_agency_type(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with agency_type parameter."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        result = query.get_subagencies("080", agency_type="funding")
    
        # Verify API call was made with funding agency_type
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "funding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100
            }
        )

tests/queries/test_sub_agency_query.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074d8fd0>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'funding', 'limit': 100, 'order': 'desc', 'page': 1, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'funding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,887 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,887 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,887 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074d8fd0>
2025-08-27 21:57:44,887 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: funding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074d8fd0>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: funding, award_type_codes: None, order: desc, sort: total_obligations, page: 1, limit: 100
_ TestSubAgencyQueryExecution.test_get_subagencies_with_award_type_codes_list __

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107114290>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075265d0>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_award_type_codes_list(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with award_type_codes as list."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        award_codes = list(CONTRACT_CODES)
        result = query.get_subagencies("080", award_type_codes=award_codes)
    
        # Verify API call was made with award_type_codes
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "award_type_codes": award_codes
            }
        )

tests/queries/test_sub_agency_query.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075265d0>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'award_type_codes': ['B', 'D', 'C', 'A'], 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'award_type_codes': ['B', 'D', 'C', 'A']}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,891 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,891 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,891 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075265d0>
2025-08-27 21:57:44,891 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['B', 'D', 'C', 'A'], order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075265d0>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['B', 'D', 'C', 'A'], order: desc, sort: total_obligations, page: 1, limit: 100
__ TestSubAgencyQueryExecution.test_get_subagencies_with_award_type_codes_set __

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107103450>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1073c5a10>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_award_type_codes_set(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with award_type_codes as set."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        award_codes = GRANT_CODES  # This is a frozenset
        result = query.get_subagencies("080", award_type_codes=award_codes)
    
        # Verify API call was made with converted list
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "award_type_codes": list(award_codes)
            }
        )

tests/queries/test_sub_agency_query.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1073c5a10>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'award_type_codes': ['03', '02', '05', '04'], 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'award_type_codes': ['03', '02', '05', '04']}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,901 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,901 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,901 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1073c5a10>
2025-08-27 21:57:44,901 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: frozenset({'03', '02', '05', '04'}), order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1073c5a10>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: frozenset({'03', '02', '05', '04'}), order: desc, sort: total_obligations, page: 1, limit: 100
_______ TestSubAgencyQueryExecution.test_get_subagencies_with_pagination _______

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107074890>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b10d0>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_pagination(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with pagination parameters."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        result = query.get_subagencies("080", page=2, limit=50)
    
        # Verify API call was made with pagination
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 2,
                "limit": 50
            }
        )

tests/queries/test_sub_agency_query.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b10d0>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'limit': 50, 'order': 'desc', 'page': 2, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 2, 'limit': 50}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,905 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,905 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,905 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b10d0>
2025-08-27 21:57:44,905 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 2, limit: 50
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b10d0>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: desc, sort: total_obligations, page: 2, limit: 50
________ TestSubAgencyQueryExecution.test_get_subagencies_with_sorting _________

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107120d50>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107354b50>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_sorting(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with sorting parameters."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        result = query.get_subagencies("080", sort="name", order="asc")
    
        # Verify API call was made with sorting
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "asc",
                "sort": "name",
                "page": 1,
                "limit": 100
            }
        )

tests/queries/test_sub_agency_query.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x107354b50>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'limit': 100, 'order': 'asc', 'page': 1, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'asc', 'sort': 'name', 'page': 1, 'limit': 100}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,909 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,909 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,909 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107354b50>
2025-08-27 21:57:44,909 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: asc, sort: name, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x107354b50>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: None, order: asc, sort: name, page: 1, limit: 100
_____ TestSubAgencyQueryExecution.test_get_subagencies_with_all_parameters _____

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107121390>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075d2d50>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_with_all_parameters(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test sub-agencies with all parameters."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        award_codes = ["A", "B", "C"]
        result = query.get_subagencies(
            "080",
            fiscal_year=2023,
            agency_type="funding",
            award_type_codes=award_codes,
            order="asc",
            sort="name",
            page=2,
            limit=25
        )
    
        # Verify API call was made with all parameters
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "funding",
                "order": "asc",
                "sort": "name",
                "page": 2,
                "limit": 25,
                "fiscal_year": 2023,
                "award_type_codes": award_codes
            }
        )

tests/queries/test_sub_agency_query.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075d2d50>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'funding', 'award_type_codes': ['A', 'B', 'C'], 'fiscal_year': 2023, 'limit': 25, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'funding', 'order': 'asc', 'sort': 'name', 'page': 2, 'limit': 25, 'fiscal_year': 2023, 'award_type_codes': ['A', 'B', 'C']}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,913 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,913 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,913 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075d2d50>
2025-08-27 21:57:44,913 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: 2023, agency_type: funding, award_type_codes: ['A', 'B', 'C'], order: asc, sort: name, page: 2, limit: 25
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1075d2d50>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: 2023, agency_type: funding, award_type_codes: ['A', 'B', 'C'], order: asc, sort: name, page: 2, limit: 25
__ TestSubAgencyQueryExecution.test_get_subagencies_filters_empty_award_codes __

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x1071219d0>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b2dd0>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_filters_empty_award_codes(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that empty/None award codes are filtered out."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        award_codes = ["A", "", None, "B", ""]
        result = query.get_subagencies("080", award_type_codes=award_codes)
    
        # Should only include non-empty codes
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100,
                "award_type_codes": ["A", "B"]
            }
        )

tests/queries/test_sub_agency_query.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b2dd0>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'award_type_codes': ['A', 'B'], 'limit': 100, 'order': 'desc', ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100, 'award_type_codes': ['A', 'B']}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,917 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,917 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,917 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b2dd0>
2025-08-27 21:57:44,917 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['A', '', None, 'B', ''], order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1074b2dd0>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['A', '', None, 'B', ''], order: desc, sort: total_obligations, page: 1, limit: 100
_ TestSubAgencyQueryExecution.test_get_subagencies_skips_empty_award_codes_list _

self = <test_sub_agency_query.TestSubAgencyQueryExecution object at 0x107122010>
mock_usa_client = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1071fd350>
agency_subagencies_fixture_data = {'fiscal_year': 2025, 'messages': [], 'page_metadata': {'hasNext': False, 'hasPrevious': False, 'limit': 100, 'next': ...1513548089.0, ...}, ...], 'name': 'National Aeronautics and Space Administration', 'new_award_count': 5465, ...}], ...}

    def test_get_subagencies_skips_empty_award_codes_list(self, mock_usa_client, agency_subagencies_fixture_data):
        """Test that empty award codes list is not included in params."""
        query = SubAgencyQuery(mock_usa_client)
        mock_usa_client.set_response("/api/v2/agency/080/sub_agency/", agency_subagencies_fixture_data)
    
        award_codes = ["", None, ""]  # All empty
        result = query.get_subagencies("080", award_type_codes=award_codes)
    
        # Should not include award_type_codes param
>       mock_usa_client.assert_called_with(
            "/api/v2/agency/080/sub_agency/",
            "GET",
            params={
                "agency_type": "awarding",
                "order": "desc",
                "sort": "total_obligations",
                "page": 1,
                "limit": 100
            }
        )

tests/queries/test_sub_agency_query.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.mocks.mock_client.MockUSASpendingClient object at 0x1071fd350>
endpoint = '/api/v2/agency/080/sub_agency/', method = 'GET', json = None
params = {'agency_type': 'awarding', 'limit': 100, 'order': 'desc', 'page': 1, ...}

    def assert_called_with(
        self,
        endpoint: str,
        method: str = "GET",
        json: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None,
    ) -> None:
        """Assert that a specific request was made.
    
        Args:
            endpoint: Expected endpoint
            method: Expected HTTP method
            json: Expected request payload
            params: Expected query parameters
    
        Raises:
            AssertionError: If request not found
        """
        for request in self._request_history:
            if (
                request["endpoint"] == endpoint
                and request["method"] == method
                and (json is None or request["json"] == json)
                and (params is None or request["params"] == params)
            ):
                return
    
>       raise AssertionError(
            f"Request not found: {method} {endpoint} with json={json}, params={params}"
        )
E       AssertionError: Request not found: GET /api/v2/agency/080/sub_agency/ with json=None, params={'agency_type': 'awarding', 'order': 'desc', 'sort': 'total_obligations', 'page': 1, 'limit': 100}

tests/mocks/mock_client.py:418: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-08-27 21:57:44,921 - usaspending.client - DEBUG - client.py:47 - __init__() - Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
2025-08-27 21:57:44,921 - usaspending.client - DEBUG - client.py:61 - __init__() - USASpending client initialized successfully
------------------------------ Captured log setup ------------------------------
DEBUG    usaspending.client:client.py:47 Initializing USASpending client with base URL: https://api.usaspending.gov/api/v2
DEBUG    usaspending.client:client.py:61 USASpending client initialized successfully
----------------------------- Captured stdout call -----------------------------
2025-08-27 21:57:44,921 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:30 - __init__() - SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1071fd350>
2025-08-27 21:57:44,921 - usaspending.queries.sub_agency_query - DEBUG - sub_agency_query.py:134 - get_subagencies() - Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['', None, ''], order: desc, sort: total_obligations, page: 1, limit: 100
------------------------------ Captured log call -------------------------------
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:30 SubAgencyQuery initialized with client: <tests.mocks.mock_client.MockUSASpendingClient object at 0x1071fd350>
DEBUG    usaspending.queries.sub_agency_query:sub_agency_query.py:134 Fetching sub-agencies for toptier_code: 080, fiscal_year: None, agency_type: awarding, award_type_codes: ['', None, ''], order: desc, sort: total_obligations, page: 1, limit: 100
=========================== short test summary info ============================
FAILED tests/models/test_agency_subagencies.py::TestAgencySubagencies::test_subagencies_property_basic
FAILED tests/models/test_agency_subagencies.py::TestAgencySubagencies::test_subagencies_property_with_offices
FAILED tests/models/test_agency_subagencies.py::TestAgencySubagencies::test_subagencies_property_uses_fiscal_year
FAILED tests/models/test_agency_subagencies.py::TestAgencySubagencies::test_subagencies_property_no_fiscal_year
FAILED tests/models/test_agency_subagencies.py::TestAgencySubagencies::test_subagencies_property_invalid_result_format
FAILED tests/models/test_subtier_agency.py::TestSubTierAgency::test_offices_property
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryEndpoint::test_base_endpoint
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryEndpoint::test_construct_endpoint
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryValidation::test_valid_toptier_codes_accepted
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_basic
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_fiscal_year
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_agency_type
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_award_type_codes_list
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_award_type_codes_set
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_pagination
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_sorting
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_with_all_parameters
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_filters_empty_award_codes
FAILED tests/queries/test_sub_agency_query.py::TestSubAgencyQueryExecution::test_get_subagencies_skips_empty_award_codes_list
================== 19 failed, 730 passed, 2 skipped in 0.67s ===================
